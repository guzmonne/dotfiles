#!/usr/bin/env bash
# This script was generated by rargs 0.0.0 (https://rargs.cloudbridge.uy)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

if [[ -n "${DEBUG:-}" ]]; then
  set -x
fi
set -e


parse_root() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -m | --model)
        rargs_model="$2"
        shift 2
        ;;
      -s | --server)
        rargs_server="$2"
        shift 2
        ;;
      -?*)
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
        exit 1
        ;;
      *)
        if [[ -z "$rargs_prompt" ]]; then
          rargs_prompt=$key
          shift
        else
          printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
          exit 1
        fi
        ;;
    esac
  done
}

root() {
  local rargs_model
  local rargs_server
  local rargs_prompt
  # Parse command arguments
  parse_root "$@"

  
  if [[ -z "$rargs_model" ]]; then
    rargs_model="codebooga"
  fi
  if [[ -z "$rargs_server" ]]; then
    rargs_server="M2"
  fi
	if ssh -q "$rargs_server" exit; then
		if [ -t 0 ]; then
			# No input from stdin, so just run the command directly
			data="$(jo model="$rargs_model" prompt="$*")"
		else
			# Input from stdin, so pass it through to the ssh command
			data="$(jo model="$rargs_model" prompt="$(cat -)")"
		fi
		ssh "$rargs_server" curl -sXPOST "http://localhost:11434/api/generate" -d "$data"
	else
		echo "Can't SSH into the $rargs_server machine"
	fi
}


normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

inspect_args() {
  prefix="rargs_"
  args="$(set | grep ^$prefix || true)"
  if [[ -n "$args" ]]; then
    echo
    echo args:
    for var in $args; do
      echo "- $var" | sed 's/=/ = /g'
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

version() {
  echo "0.1.0"
}
usage() {
  printf "A wrapper around the ollama binary exposed by an external machine invoked through SSH.\n"
  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  mollama [OPTIONS] [PROMPT] \n"
  printf "  mollama -h|--help\n"
  printf "  mollama -v|--version\n"
  printf "\n\033[4m%s\033[0m\n" "Arguments:"
  printf "  PROMPT\n"
  printf "    The prompt to use. Will try to read from `stdin` if not provided.\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -m --model [<MODEL>]\n"
  printf "    The model to use.\n"
  printf "    [@default codebooga]\n"
  printf "  -s --server [<SERVER>]\n"
  printf "    The SSH server to connect to.\n"
  printf "    [@default M2]\n"
  printf "  -h --help\n"
  printf "    Print help\n"
  printf "  -v --version\n"
  printf "    Print version\n"
}

parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -v|--version)
        version
        exit
        ;;
      -h|--help)
        usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done
  action="${1:-}"

  case $action in
    -h|--help)
      usage
      exit
      ;;
    "")
      action="root"
      ;;
    *)
      action="root"
      ;;
  esac
}

run() {
  declare -A deps=()
  declare -a input=()
  normalize_input "$@"
  parse_arguments "${input[@]}"
  root "${input[@]}"
}

run "$@"
