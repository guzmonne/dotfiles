#!/usr/bin/env bash
# This script was generated by rargs 0.0.0 (https://rargs.cloudbridge.uy)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

if [[ -n "${DEBUG:-}" ]]; then
  set -x
fi
set -e


normalize_rargs_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      rargs_input+=("${BASH_REMATCH[1]}")
      rargs_input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      rargs_input+=("${BASH_REMATCH[1]}")
      rargs_input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        rargs_input+=("-${flags:i:1}")
      done
    else
      rargs_input+=("$arg")
    fi

    shift
  done
}

inspect_args() {
  prefix="rargs_"
  args="$(set | grep ^$prefix | grep -v rargs_run || true)"
  if [[ -n "$args" ]]; then
    echo
    echo args:
    for var in $args; do
      echo "- $var" | sed 's/=/ = /g'
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

  if ((${#rargs_other_args[@]})); then
    echo
    echo rargs_other_args:
    echo "- \${rargs_other_args[*]} = ${rargs_other_args[*]}"
    for i in "${!rargs_other_args[@]}"; do
      echo "- \${rargs_other_args[$i]} = ${rargs_other_args[$i]}"
    done
  fi
}

version() {
  echo "0.1.0"
}
usage() {
  printf "Display preview of tmux windows/panes. Meant for use in fzf previews.\n"
  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  tmux-preview [OPTIONS] [COMMAND] [COMMAND_OPTIONS]\n"
  printf "  tmux-preview -h|--help\n"
  printf "  tmux-preview -v|--version\n"
  printf "\n\033[4m%s\033[0m\n" "Commands:"
  cat <<EOF
  display-session .... Display a single session
  display-tree ....... Display a full tree, with selected session highlighted.
EOF

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
  printf "  -v --version\n"
  printf "    Print version\n"
}

parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -v|--version)
        version
        exit
        ;;
      -h|--help)
        usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done
  action="${1:-}"

  case $action in
    display-session)
      action="display-session"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    display-tree)
      action="display-tree"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    -h|--help)
      usage
      exit
      ;;
    "")
      ;;
    *)
      printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid command: " "$action" >&2
      exit 1
      ;;
  esac
}
display-session_usage() {
  printf "Display a single session\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  display-session [OPTIONS] SESSION-NAME [SERVER]\n"
  printf "  display-session -h|--help\n"
  printf "\n\033[4m%s\033[0m\n" "Arguments:"
  printf "  SESSION-NAME\n"
  printf "    Name of the session.\n"
  printf "    [@required]\n"
  printf "  SERVER\n"
  printf "    Tmux server socket name.\n"
  printf "    [@default default]\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_display-session_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        display-session_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -?*)
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
        exit 1
        ;;
      *)
        if [[ -z "$rargs_session_name" ]]; then
          rargs_session_name=$key
          shift
        elif [[ -z "$rargs_server" ]]; then
          rargs_server=$key
          shift
        else
          printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
          exit 1
        fi
        ;;
    esac
  done
}
# Display a single session
display-session() {
  local rargs_session_name
  local rargs_server
  # Parse command arguments
  parse_display-session_arguments "$@"

  
    
  if [[ -z "$rargs_server" ]]; then
    rargs_server="default"
  fi
    
  
  if [[ -z "$rargs_session_name" ]]; then
    printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required option: " "session-name" >&2
    display-session_usage >&2
    exit 1
  fi
	local session_id
	session_id="$(tmux -L "$rargs_server" ls -F '#{session_id}' -f "#{==:#{session_name},${rargs_session_name}}")"
	if [[ -z $session_id ]]; then
		echo "Unknown session: ${rargs_session_name}"
		return 1
	fi
	tmux -L "$rargs_server" capture-pane -ep -t "${session_id}"
}
display-tree_usage() {
  printf "Display a full tree, with selected session highlighted.\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  display-tree [OPTIONS] [SERVER]\n"
  printf "  display-tree -h|--help\n"
  printf "\n\033[4m%s\033[0m\n" "Arguments:"
  printf "  SERVER\n"
  printf "    Tmux server socket name.\n"
  printf "    [@default default]\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_display-tree_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        display-tree_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -?*)
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
        exit 1
        ;;
      *)
        if [[ -z "$rargs_server" ]]; then
          rargs_server=$key
          shift
        else
          printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
          exit 1
        fi
        ;;
    esac
  done
}
# Display a full tree, with selected session highlighted.
display-tree() {
  local rargs_server
  # Parse command arguments
  parse_display-tree_arguments "$@"

  
    
  if [[ -z "$rargs_server" ]]; then
    rargs_server="default"
  fi
    
	local session_info
	local magenta="\033[35m"
	local cyan="\033[36m"
	local bold="\033[1m"
	local reset="\033[0m"
	tmux -L "$rargs_server" ls -F'#{session_id}' | while read -r s; do
		S=$(tmux -L "$rargs_server" ls -F'#{session_id}#{session_name}: #{T:tree_mode_format}' | grep ^"$s")
		session_info="${S##"$s"}"
		echo -e "${cyan}${bold}$session_info${reset}"
		# Display each window
		tmux -L "$rargs_server" lsw -t"$s" -F'#{window_id}' | while read -r w; do
			W=$(tmux -L "$rargs_server" lsw -t"$s" -F'#{window_id}#{T:tree_mode_format}' | grep ^"$w")
			echo -e "  ${magenta}ï¬Œ ${reset}${W##"$w"}"
		done
	done
}

rargs_run() {
  declare -A deps=()
  declare -a rargs_input=()
  normalize_rargs_input "$@"
  parse_arguments "${rargs_input[@]}"
  # Call the right command action
  case "$action" in
    "display-session")
      display-session "${rargs_input[@]}"
      exit
      ;;
    "display-tree")
      display-tree "${rargs_input[@]}"
      exit
      ;;
    "")
      printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing command. Select one of " "display-session, display-tree" >&2
      usage >&2
      exit 1
      ;;
    
  esac
}

rargs_run "$@"
