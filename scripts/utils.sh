#!/usr/bin/env bash
# This script was generated by rargs 0.0.0 (https://rargs.cloudbridge.uy)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

if [[ -n "${DEBUG:-}" ]]; then
  set -x
fi
set -e


normalize_rargs_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      rargs_input+=("${BASH_REMATCH[1]}")
      rargs_input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      rargs_input+=("${BASH_REMATCH[1]}")
      rargs_input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        rargs_input+=("-${flags:i:1}")
      done
    else
      rargs_input+=("$arg")
    fi

    shift
  done
}

inspect_args() {
  prefix="rargs_"
  args="$(set | grep ^$prefix | grep -v rargs_run || true)"
  if [[ -n "$args" ]]; then
    echo
    echo args:
    for var in $args; do
      echo "- $var" | sed 's/=/ = /g'
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

  if ((${#rargs_other_args[@]})); then
    echo
    echo rargs_other_args:
    echo "- \${rargs_other_args[*]} = ${rargs_other_args[*]}"
    for i in "${!rargs_other_args[@]}"; do
      echo "- \${rargs_other_args[$i]} = ${rargs_other_args[$i]}"
    done
  fi
}

version() {
  echo "0.1.0"
}
usage() {
  printf "A list of useful cli commands\n"
  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  utils [OPTIONS] [COMMAND] [COMMAND_OPTIONS]\n"
  printf "  utils -h|--help\n"
  printf "  utils -v|--version\n"
  printf "\n\033[4m%s\033[0m\n" "Commands:"
  cat <<EOF
  battery ............ Prints the current battery level
  kill-port .......... Kills the process currently listening on the provided port.
  listening-ports .... List out all the currently LISTENING ports.
  pid-port ........... List out the PID for the process that is currently listening on the provided port.
EOF

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
  printf "  -v --version\n"
  printf "    Print version\n"
}

parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -v|--version)
        version
        exit
        ;;
      -h|--help)
        usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done
  action="${1:-}"

  case $action in
    battery)
      action="battery"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    kill-port)
      action="kill-port"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    listening-ports)
      action="listening-ports"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    pid-port)
      action="pid-port"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    -h|--help)
      usage
      exit
      ;;
    "")
      ;;
    *)
      printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid command: " "$action" >&2
      exit 1
      ;;
  esac
}
battery_usage() {
  printf "Prints the current battery level\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  battery [OPTIONS]\n"
  printf "  battery -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_battery_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        battery_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -?*)
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
        exit 1
        ;;
      *)
        if [[ "$key" == "" ]]; then
          break
        fi
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
        exit 1
        ;;
    esac
  done
}
# Prints the current battery level
battery() {
  # Parse command arguments
  parse_battery_arguments "$@"

	pmset -g batt | grep -E "([0-9]+\%).*" -o --colour=auto | cut -f1 -d';'
}
kill-port_usage() {
  printf "Kills the process currently listening on the provided port.\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  kill-port [OPTIONS] PORT\n"
  printf "  kill-port -h|--help\n"
  printf "\n\033[4m%s\033[0m\n" "Arguments:"
  printf "  PORT\n"
  printf "    Port number to check\n"
  printf "    [@required]\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -v --ip-version [<IP-VERSION>]\n"
  printf "    IP version to use\n"
  printf "    [@default IPv4, @choices IPv4, IPv6]\n"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_kill-port_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        kill-port_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -v | --ip-version)
        rargs_ip_version="$2"
        shift 2
        ;;
      -?*)
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
        exit 1
        ;;
      *)
        if [[ -z "$rargs_port" ]]; then
          rargs_port=$key
          shift
        else
          printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
          exit 1
        fi
        ;;
    esac
  done
}
# Kills the process currently listening on the provided port.
kill-port() {
  local rargs_ip_version
  local rargs_port
  # Parse command arguments
  parse_kill-port_arguments "$@"

  
    
  if [[ -z "$rargs_ip_version" ]]; then
    rargs_ip_version="IPv4"
  fi
    
  
  if [[ -n "$rargs_ip_version" ]]; then
    if [[ ! "(IPv4 IPv6)" =~ $rargs_ip_version ]]; then
      printf "\e[31m%s\e[33m%s\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option for " "ip-version" ": " "$rargs_ip_version" >&2
      kill-port_usage >&2
      exit 1
    fi
  fi
  
  if [[ -z "$rargs_port" ]]; then
    printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required option: " "port" >&2
    kill-port_usage >&2
    exit 1
  fi
	pid-port "$@" | xargs kill -9
}
listening-ports_usage() {
  printf "List out all the currently LISTENING ports.\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  listening-ports [OPTIONS]\n"
  printf "  listening-ports -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_listening-ports_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        listening-ports_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -?*)
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
        exit 1
        ;;
      *)
        if [[ "$key" == "" ]]; then
          break
        fi
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
        exit 1
        ;;
    esac
  done
}
# List out all the currently LISTENING ports.
listening-ports() {
  # Parse command arguments
  parse_listening-ports_arguments "$@"

	lsof -i -P -n | grep LISTEN
}
pid-port_usage() {
  printf "List out the PID for the process that is currently listening on the provided port.\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  pid-port [OPTIONS] PORT\n"
  printf "  pid-port -h|--help\n"
  printf "\n\033[4m%s\033[0m\n" "Arguments:"
  printf "  PORT\n"
  printf "    Port number to check\n"
  printf "    [@required]\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -v --ip-version [<IP-VERSION>]\n"
  printf "    IP version to use\n"
  printf "    [@default IPv4, @choices IPv4, IPv6]\n"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_pid-port_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        pid-port_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -v | --ip-version)
        rargs_ip_version="$2"
        shift 2
        ;;
      -?*)
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
        exit 1
        ;;
      *)
        if [[ -z "$rargs_port" ]]; then
          rargs_port=$key
          shift
        else
          printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
          exit 1
        fi
        ;;
    esac
  done
}
# List out the PID for the process that is currently listening on the provided port.
pid-port() {
  local rargs_ip_version
  local rargs_port
  # Parse command arguments
  parse_pid-port_arguments "$@"

  
    
  if [[ -z "$rargs_ip_version" ]]; then
    rargs_ip_version="IPv4"
  fi
    
  
  if [[ -n "$rargs_ip_version" ]]; then
    if [[ ! "(IPv4 IPv6)" =~ $rargs_ip_version ]]; then
      printf "\e[31m%s\e[33m%s\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option for " "ip-version" ": " "$rargs_ip_version" >&2
      pid-port_usage >&2
      exit 1
    fi
  fi
  
  if [[ -z "$rargs_port" ]]; then
    printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required option: " "port" >&2
    pid-port_usage >&2
    exit 1
  fi
	line="$(listening-ports | grep "$rargs_ip_version" | grep ":$rargs_port")"
	pid=$(echo "$line" | awk '{print $2}')
	pid_name=$(echo "$line" | awk '{print $1}')
	# If there's nothing running, exit
	[[ -z "$pid" ]] && exit 0
	# output the process name to stderr so it won't be piped along
	echo >&2 -e "$pid_name"
	# print the process id. It can be piped, for example to pbcopy
	echo -e "$pid"
}

rargs_run() {
  declare -A deps=()
  declare -a rargs_input=()
  normalize_rargs_input "$@"
  parse_arguments "${rargs_input[@]}"
  # Call the right command action
  case "$action" in
    "battery")
      battery "${rargs_input[@]}"
      exit
      ;;
    "kill-port")
      kill-port "${rargs_input[@]}"
      exit
      ;;
    "listening-ports")
      listening-ports "${rargs_input[@]}"
      exit
      ;;
    "pid-port")
      pid-port "${rargs_input[@]}"
      exit
      ;;
    "")
      printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing command. Select one of " "battery, kill-port, listening-ports, pid-port" >&2
      usage >&2
      exit 1
      ;;
    
  esac
}

rargs_run "$@"
