#!/usr/bin/env bash
# This script was generated by rargs 0.0.0 (https://rargs.cloudbridge.uy)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

if [[ -n "${DEBUG:-}" ]]; then
  set -x
fi
set -e


normalize_rargs_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      rargs_input+=("${BASH_REMATCH[1]}")
      rargs_input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      rargs_input+=("${BASH_REMATCH[1]}")
      rargs_input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        rargs_input+=("-${flags:i:1}")
      done
    else
      rargs_input+=("$arg")
    fi

    shift
  done
}

version() {
  echo -n "0.1.0"
}
usage() {
  printf "A uv wrapper\n"
  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  uv [OPTIONS] [COMMAND] [COMMAND_OPTIONS]\n"
  printf "  uv -h|--help\n"
  printf "  uv -v|--version\n"
  printf "\n\033[4m%s\033[0m\n" "Commands:"
  cat <<EOF
  poetry-install .... Fakes poetry install with uv
  va ................ Activates a local virtual environment
  vc ................ Creates a new virtual environment
  vd ................ Deactivates a virtual environment
EOF

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
  printf "  -v --version\n"
  printf "    Print version\n"
}

parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -v|--version)
        version
        exit
        ;;
      -h|--help)
        usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done
  action="${1:-}"

  case $action in
    poetry-install)
      action="poetry-install"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    red)
      action="red"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    va)
      action="va"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    vc)
      action="vc"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    vd)
      action="vd"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    -h|--help)
      usage
      exit
      ;;
    "")
      ;;
    *)
      printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid command: " "$action" >&2
      exit 1
      ;;
  esac
}
poetry-install_usage() {
  printf "Fakes poetry install with uv\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  poetry-install [OPTIONS]\n"
  printf "  poetry-install -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_poetry-install_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        poetry-install_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -?*)
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
        exit 1
        ;;
      *)
        if [[ "$key" == "" ]]; then
          break
        fi
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
        exit 1
        ;;
    esac
  done
}
# Fakes poetry install with uv
poetry-install() {

  # Parse command arguments
  parse_poetry-install_arguments "$@"

	uv pip install --no-deps -r <(POETRY_WARNINGS_EXPORT=false poetry export --without-hashes --with dev -f requirements.txt)
	poetry install --only-root
}
red_usage() {
  printf "Prints to `stderr` in `red`\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  red [OPTIONS]\n"
  printf "  red -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_red_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        red_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --)
        shift
        rargs_other_args+=("$@")
        break
        ;;
      -?*)
        rargs_other_args+=("$1")
        shift
        ;;
      *)
        rargs_other_args+=("$1")
        shift
        ;;
    esac
  done
}
# Prints to `stderr` in `red`
red() {

  # Parse command arguments
  parse_red_arguments "$@"

	gum style --foreground '#E53935' "$rargs_other_args"
}
va_usage() {
  printf "Activates a local virtual environment\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  va [OPTIONS] [SOURCE]\n"
  printf "  va -h|--help\n"
  printf "\n\033[4m%s\033[0m\n" "Arguments:"
  printf "  SOURCE\n"
  printf "    Source directory from where to activate the environment\n"
  printf "    [@default .]\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_va_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        va_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -?*)
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
        exit 1
        ;;
      *)
        if [[ -z "$rargs_source" ]]; then
          rargs_source=$key
          shift
        else
          printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
          exit 1
        fi
        ;;
    esac
  done
}
# Activates a local virtual environment
va() {
  local rargs_source

  # Parse command arguments
  parse_va_arguments "$@"

  
    
  if [[ -z "$rargs_source" ]]; then
    rargs_source="."
  fi
    
	source "${rargs_source}/.venv/bin/activate" 2>/dev/null || source "${rargs_source}/../.venv/bin/activate" 2>/dev/null || red 'No .venv directory found on this or parent directory'
}
vc_usage() {
  printf "Creates a new virtual environment\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  vc [OPTIONS]\n"
  printf "  vc -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_vc_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        vc_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --)
        shift
        rargs_other_args+=("$@")
        break
        ;;
      -?*)
        rargs_other_args+=("$1")
        shift
        ;;
      *)
        rargs_other_args+=("$1")
        shift
        ;;
    esac
  done
}
# Creates a new virtual environment
vc() {

  # Parse command arguments
  parse_vc_arguments "$@"

	uv venv --seed --python-preference managed "$rargs_other_args"
}
vd_usage() {
  printf "Deactivates a virtual environment\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  vd [OPTIONS]\n"
  printf "  vd -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_vd_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        vd_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -?*)
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
        exit 1
        ;;
      *)
        if [[ "$key" == "" ]]; then
          break
        fi
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
        exit 1
        ;;
    esac
  done
}
# Deactivates a virtual environment
vd() {

  # Parse command arguments
  parse_vd_arguments "$@"

	deactivate
}

rargs_run() {
  declare -a rargs_other_args=()
  declare -a rargs_input=()
  normalize_rargs_input "$@"
  parse_arguments "${rargs_input[@]}"
  # Call the right command action
  case "$action" in
    "poetry-install")
      poetry-install "${rargs_input[@]}"
      exit
      ;;
    "red")
      red "${rargs_input[@]}"
      exit
      ;;
    "va")
      va "${rargs_input[@]}"
      exit
      ;;
    "vc")
      vc "${rargs_input[@]}"
      exit
      ;;
    "vd")
      vd "${rargs_input[@]}"
      exit
      ;;
    "")
      printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing command. Select one of " "poetry-install, va, vc, vd" >&2
      usage >&2
      exit 1
      ;;
    
  esac
}

rargs_run "$@"
