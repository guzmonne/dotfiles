#!/usr/bin/env bash
# This script was generated by rargs 0.0.0 (https://rargs.cloudbridge.uy)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

if [[ -n "${DEBUG:-}" ]]; then
  set -x
fi
set -e


parse_root() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -o | --option)
        rargs_option="$2"
        shift 2
        ;;
      -?*)
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
        exit 1
        ;;
      *)
        if [[ "$key" == "" ]]; then
          break
        fi
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
        exit 1
        ;;
    esac
  done
}

root() {
  local rargs_option
  # Parse environment variables
  
  if [[ -z "${OPENAI_API_KEY:-}" ]]; then
    printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required environment variable: " "OPENAI_API_KEY" >&2
    usage >&2
    exit 1
  fi

  # Parse command arguments
  parse_root "$@"

	if [[ -z "$rargs_option" ]]; then
		rargs_option="$(filter-options)"
	fi
	if [[ -z "$rargs_option" ]]; then
		alert "No option selected"
		return 1
	fi
	option="$(echo -n "$rargs_option" | awk -F'.' '{print $1}')"
	case "$option" in
	"1")
		continue-existing-session
		;;
	"2")
		start-new-session
		;;
	"3")
		start-anonymous-session
		;;
	"0")
		continue-last-session
		;;
	*)
		alert "No option selected"
		return 1
		;;
	esac
}


normalize_rargs_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      rargs_input+=("${BASH_REMATCH[1]}")
      rargs_input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      rargs_input+=("${BASH_REMATCH[1]}")
      rargs_input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        rargs_input+=("-${flags:i:1}")
      done
    else
      rargs_input+=("$arg")
    fi

    shift
  done
}

inspect_args() {
  prefix="rargs_"
  args="$(set | grep ^$prefix | grep -v rargs_run || true)"
  if [[ -n "$args" ]]; then
    echo
    echo args:
    for var in $args; do
      echo "- $var" | sed 's/=/ = /g'
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

  if ((${#rargs_other_args[@]})); then
    echo
    echo rargs_other_args:
    echo "- \${rargs_other_args[*]} = ${rargs_other_args[*]}"
    for i in "${!rargs_other_args[@]}"; do
      echo "- \${rargs_other_args[$i]} = ${rargs_other_args[$i]}"
    done
  fi
}

gum="/opt/homebrew/bin/gum"
textarea="$HOME/.local/bin/textarea.sh"
last_used_session_path="$HOME/.d/last_used_session"
d="$HOME/.local/bin/d"

version() {
  echo "0.1.0"
}
usage() {
  printf "A wrapper around `d`, my custom OpenAi cli tool.\n"
  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  d [OPTIONS] [COMMAND] [COMMAND_OPTIONS]\n"
  printf "  d -h|--help\n"
  printf "  d -v|--version\n"
  printf "\n\033[4m%s\033[0m\n" "Commands:"
  cat <<EOF
  continue-existing-session .... Starts a new session
  continue-last-session ........ Starts a new session
  filter-session ............... Choose a session using a gum filter
  start-anonymous-session ...... Starts a new anonymous session
  start-new-session ............ Starts a new session
EOF

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -o --option [<OPTION>]\n"
  printf "    Option to chose\n"
  printf "  -h --help\n"
  printf "    Print help\n"
  printf "  -v --version\n"
  printf "    Print version\n"
}

parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -v|--version)
        version
        exit
        ;;
      -h|--help)
        usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done
  action="${1:-}"

  case $action in
    continue-existing-session)
      action="continue-existing-session"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    continue-last-session)
      action="continue-last-session"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    filter)
      action="filter"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    filter-options)
      action="filter-options"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    filter-session)
      action="filter-session"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    get_prompt)
      action="get_prompt"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    input)
      action="input"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    start-anonymous-session)
      action="start-anonymous-session"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    start-new-session)
      action="start-new-session"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    -h|--help)
      usage
      exit
      ;;
    "")
      action="root"
      ;;
    *)
      action="root"
      ;;
  esac
}
continue-existing-session_usage() {
  printf "Starts a new session\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  continue-existing-session [OPTIONS] [SESSION]\n"
  printf "  continue-existing-session -h|--help\n"
  printf "\n\033[4m%s\033[0m\n" "Arguments:"
  printf "  SESSION\n"
  printf "    Session name\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -o --option [<OPTION>]\n"
  printf "    Option to chose\n"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_continue-existing-session_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        continue-existing-session_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -o | --option)
        rargs_option="$2"
        shift 2
        ;;
      -?*)
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
        exit 1
        ;;
      *)
        if [[ -z "$rargs_session" ]]; then
          rargs_session=$key
          shift
        else
          printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
          exit 1
        fi
        ;;
    esac
  done
}
# Starts a new session
continue-existing-session() {
  local rargs_option
  local rargs_session
  # Parse environment variables
  
  if [[ -z "${OPENAI_API_KEY:-}" ]]; then
    printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required environment variable: " "OPENAI_API_KEY" >&2
    continue-existing-session_usage >&2
    exit 1
  fi

  # Parse command arguments
  parse_continue-existing-session_arguments "$@"

	if [[ -z "$rargs_session" ]]; then
		rargs_session="$(filter-session)"
	fi
	if [[ -z "$rargs_session" ]]; then
		alert "The session name is required"
		return 1
	fi
	$d chat --session="$rargs_session" "$(get_prompt)"
	echo -n "$rargs_session" >"$last_used_session_path"
}
continue-last-session_usage() {
  printf "Starts a new session\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  continue-last-session [OPTIONS] [SESSION]\n"
  printf "  continue-last-session -h|--help\n"
  printf "\n\033[4m%s\033[0m\n" "Arguments:"
  printf "  SESSION\n"
  printf "    Session name\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -o --option [<OPTION>]\n"
  printf "    Option to chose\n"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_continue-last-session_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        continue-last-session_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -o | --option)
        rargs_option="$2"
        shift 2
        ;;
      -?*)
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
        exit 1
        ;;
      *)
        if [[ -z "$rargs_session" ]]; then
          rargs_session=$key
          shift
        else
          printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
          exit 1
        fi
        ;;
    esac
  done
}
# Starts a new session
continue-last-session() {
  local rargs_option
  local rargs_session
  # Parse environment variables
  
  if [[ -z "${OPENAI_API_KEY:-}" ]]; then
    printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required environment variable: " "OPENAI_API_KEY" >&2
    continue-last-session_usage >&2
    exit 1
  fi

  # Parse command arguments
  parse_continue-last-session_arguments "$@"

	if [[ -z "$rargs_session" ]]; then
		rargs_session="$(cat "$last_used_session_path")"
	fi
	if [[ -z "$rargs_session" ]]; then
		alert "The session name is required"
		return 1
	fi
	$d chat --session="$rargs_session" "$(get_prompt)"
}
filter_usage() {
  printf "Filter a list of values\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  filter [OPTIONS]\n"
  printf "  filter -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -o --option [<OPTION>]\n"
  printf "    Option to chose\n"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_filter_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        filter_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -o | --option)
        rargs_option="$2"
        shift 2
        ;;
      -?*)
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
        exit 1
        ;;
      *)
        if [[ "$key" == "" ]]; then
          break
        fi
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
        exit 1
        ;;
    esac
  done
}
# Filter a list of values
filter() {
  local rargs_option
  # Parse environment variables
  
  if [[ -z "${OPENAI_API_KEY:-}" ]]; then
    printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required environment variable: " "OPENAI_API_KEY" >&2
    filter_usage >&2
    exit 1
  fi

  # Parse command arguments
  parse_filter_arguments "$@"

	cat - |
		$gum filter \
			--reverse \
			--prompt="❯ " \
			--indicator=" " \
			--selected-prefix=" ◉ " \
			--unselected-prefix=" ○ " \
			--limit=1 \
			--placeholder="Type to filter..." \
			--sort
}
filter-options_usage() {
  printf "Choose a session using a gum filter\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  filter-options [OPTIONS]\n"
  printf "  filter-options -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -o --option [<OPTION>]\n"
  printf "    Option to chose\n"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_filter-options_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        filter-options_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -o | --option)
        rargs_option="$2"
        shift 2
        ;;
      -?*)
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
        exit 1
        ;;
      *)
        if [[ "$key" == "" ]]; then
          break
        fi
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
        exit 1
        ;;
    esac
  done
}
# Choose a session using a gum filter
filter-options() {
  local rargs_option
  # Parse environment variables
  
  if [[ -z "${OPENAI_API_KEY:-}" ]]; then
    printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required environment variable: " "OPENAI_API_KEY" >&2
    filter-options_usage >&2
    exit 1
  fi

  # Parse command arguments
  parse_filter-options_arguments "$@"

	tee <<-EOF | filter
		1. Continue an existing session
		2. Start a new session
		3. Start anonymous session
		---
		0. Continue the last session
	EOF
}
filter-session_usage() {
  printf "Choose a session using a gum filter\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  filter-session [OPTIONS]\n"
  printf "  filter-session -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -o --option [<OPTION>]\n"
  printf "    Option to chose\n"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_filter-session_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        filter-session_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -o | --option)
        rargs_option="$2"
        shift 2
        ;;
      -?*)
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
        exit 1
        ;;
      *)
        if [[ "$key" == "" ]]; then
          break
        fi
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
        exit 1
        ;;
    esac
  done
}
# Choose a session using a gum filter
filter-session() {
  local rargs_option
  # Parse environment variables
  
  if [[ -z "${OPENAI_API_KEY:-}" ]]; then
    printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required environment variable: " "OPENAI_API_KEY" >&2
    filter-session_usage >&2
    exit 1
  fi

  # Parse command arguments
  parse_filter-session_arguments "$@"

	$d sessions list | jq -r '.[] | .' | filter | sort
}
get_prompt_usage() {
  printf "Gets the user prompt\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  get_prompt [OPTIONS]\n"
  printf "  get_prompt -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -o --option [<OPTION>]\n"
  printf "    Option to chose\n"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_get_prompt_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        get_prompt_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -o | --option)
        rargs_option="$2"
        shift 2
        ;;
      -?*)
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
        exit 1
        ;;
      *)
        if [[ "$key" == "" ]]; then
          break
        fi
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
        exit 1
        ;;
    esac
  done
}
# Gets the user prompt
get_prompt() {
  local rargs_option
  # Parse environment variables
  
  if [[ -z "${OPENAI_API_KEY:-}" ]]; then
    printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required environment variable: " "OPENAI_API_KEY" >&2
    get_prompt_usage >&2
    exit 1
  fi

  # Parse command arguments
  parse_get_prompt_arguments "$@"

	prompt="$($textarea)"
	if [[ -z "$prompt" ]]; then
		exit 1
	fi
	echo -n "$prompt"
}
input_usage() {
  printf "Input box\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  input [OPTIONS]\n"
  printf "  input --help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --header [<HEADER>]\n"
  printf "    Input header\n"
  printf "  -o --option [<OPTION>]\n"
  printf "    Option to chose\n"
  printf "  -p --placeholder [<PLACEHOLDER>]\n"
  printf "    Input placeholder\n"
  printf "  -P --prompt [<PROMPT>]\n"
  printf "    Input prompt\n"
  printf "  --help\n"
  printf "    Print help\n"
}
parse_input_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        input_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -h | --header)
        rargs_header="$2"
        shift 2
        ;;
      -o | --option)
        rargs_option="$2"
        shift 2
        ;;
      -p | --placeholder)
        rargs_placeholder="$2"
        shift 2
        ;;
      -P | --prompt)
        rargs_prompt="$2"
        shift 2
        ;;
      -?*)
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
        exit 1
        ;;
      *)
        if [[ "$key" == "" ]]; then
          break
        fi
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
        exit 1
        ;;
    esac
  done
}
# Input box
input() {
  local rargs_header
  local rargs_option
  local rargs_placeholder
  local rargs_prompt
  # Parse environment variables
  
  if [[ -z "${OPENAI_API_KEY:-}" ]]; then
    printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required environment variable: " "OPENAI_API_KEY" >&2
    input_usage >&2
    exit 1
  fi

  # Parse command arguments
  parse_input_arguments "$@"

	gum input \
		--placeholder="$rargs_placeholder" \
		--prompt="$rargs_prompt" \
		--header="$rargs_header" \
		--width=40 \
		--char-limit=400
}
start-anonymous-session_usage() {
  printf "Starts a new anonymous session\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  start-anonymous-session [OPTIONS]\n"
  printf "  start-anonymous-session -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -o --option [<OPTION>]\n"
  printf "    Option to chose\n"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_start-anonymous-session_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        start-anonymous-session_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -o | --option)
        rargs_option="$2"
        shift 2
        ;;
      -?*)
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
        exit 1
        ;;
      *)
        if [[ "$key" == "" ]]; then
          break
        fi
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
        exit 1
        ;;
    esac
  done
}
# Starts a new anonymous session
start-anonymous-session() {
  local rargs_option
  # Parse environment variables
  
  if [[ -z "${OPENAI_API_KEY:-}" ]]; then
    printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required environment variable: " "OPENAI_API_KEY" >&2
    start-anonymous-session_usage >&2
    exit 1
  fi

  # Parse command arguments
  parse_start-anonymous-session_arguments "$@"

	$d chat "$(get_prompt)"
}
start-new-session_usage() {
  printf "Starts a new session\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  start-new-session [OPTIONS] [SESSION]\n"
  printf "  start-new-session -h|--help\n"
  printf "\n\033[4m%s\033[0m\n" "Arguments:"
  printf "  SESSION\n"
  printf "    Session name\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -o --option [<OPTION>]\n"
  printf "    Option to chose\n"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_start-new-session_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        start-new-session_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -o | --option)
        rargs_option="$2"
        shift 2
        ;;
      -?*)
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
        exit 1
        ;;
      *)
        if [[ -z "$rargs_session" ]]; then
          rargs_session=$key
          shift
        else
          printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
          exit 1
        fi
        ;;
    esac
  done
}
# Starts a new session
start-new-session() {
  local rargs_option
  local rargs_session
  # Parse environment variables
  
  if [[ -z "${OPENAI_API_KEY:-}" ]]; then
    printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required environment variable: " "OPENAI_API_KEY" >&2
    start-new-session_usage >&2
    exit 1
  fi

  # Parse command arguments
  parse_start-new-session_arguments "$@"

	if [[ -z "$rargs_session" ]]; then
		rargs_session="$(input \
			-P "New Session: " \
			-h "Please enter a new name for the 'd' session" \
			-p "E.g. bashy")"
	fi
	if [[ -z "$rargs_session" ]]; then
		alert "The session name is required"
		return 1
	fi
	$d chat --session="$rargs_session" "$(get_prompt)"
	echo -n "$rargs_session" >"$last_used_session_path"
}

rargs_run() {
  declare -A deps=()
  declare -a rargs_input=()
  normalize_rargs_input "$@"
  parse_arguments "${rargs_input[@]}"
  # Check global environment variables
  
  if [[ -z "${OPENAI_API_KEY:-}" ]]; then
    printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required environment variable: " "OPENAI_API_KEY" >&2
    usage >&2
    exit 1
  fi

  # Call the right command action
  case "$action" in
    "continue-existing-session")
      continue-existing-session "${rargs_input[@]}"
      exit
      ;;
    "continue-last-session")
      continue-last-session "${rargs_input[@]}"
      exit
      ;;
    "filter")
      filter "${rargs_input[@]}"
      exit
      ;;
    "filter-options")
      filter-options "${rargs_input[@]}"
      exit
      ;;
    "filter-session")
      filter-session "${rargs_input[@]}"
      exit
      ;;
    "get_prompt")
      get_prompt "${rargs_input[@]}"
      exit
      ;;
    "input")
      input "${rargs_input[@]}"
      exit
      ;;
    "start-anonymous-session")
      start-anonymous-session "${rargs_input[@]}"
      exit
      ;;
    "start-new-session")
      start-new-session "${rargs_input[@]}"
      exit
      ;;
    root)
      root "${rargs_input[@]}"
      exit
      ;;
    "")
      root "${rargs_input[@]}"
      ;;
    
  esac
}

rargs_run "$@"
