#!/usr/bin/env bash
# This script was generated by rargs 0.0.0 (https://rargs.cloudbridge.uy)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

if [[ -n "${DEBUG:-}" ]]; then
  set -x
fi
set -e


normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

inspect_args() {
  prefix="rargs_"
  args="$(set | grep ^$prefix || true)"
  if [[ -n "$args" ]]; then
    echo
    echo args:
    for var in $args; do
      echo "- $var" | sed 's/=/ = /g'
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

NOVELAI_URL="https://api.novelai.net"
BAD_WORDS_IDS='[[3],[49356],[1431],[31715],[34387],[20765],[30702],[10691],[49333],[1266],[19438],[43145],[26523],[41471],[2936],"[85","85]",[49332],[7286],[1115]]'
REPETITION_PENALTY_WHITELIST='[49256,49264,49231,49230,49287,85,49255,49399,49262,336,333,432,363,468,492,745,401,426,623,794,1096,2919,2072,7379,1259,2110,620,526,487,16562,603,805,761,2681,942,8917,653,3513,506,5301,562,5010,614,10942,539,2976,462,5189,567,2032,123,124,125,126,127,128,129,130,131,132,588,803,1040,49209,4,5,6,7,8,9,10,11,12]'
LOGIT_BIAS_EXP='[{"sequence":[23],"bias":-0.08,"ensure_sequence_finish":false,"generate_once":false},{"sequence":[21],"bias":-0.08,"ensure_sequence_finish":false,"generate_once":false}]'
ORDER="[3,0,5]"

version() {
  echo "0.1.0"
}
usage() {
  printf "A script to interact with NovelAI\n"
  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  novelai [OPTIONS] [COMMAND] [COMMAND_OPTIONS]\n"
  printf "  novelai -h|--help\n"
  printf "  novelai -v|--version\n"
  printf "\n\033[4m%s\033[0m\n" "Commands:"
  cat <<EOF
  generate .... Generate a completion using NovelAi
EOF

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
  printf "  -v --version\n"
  printf "    Print version\n"
}

parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -v|--version)
        version
        exit
        ;;
      -h|--help)
        usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done
  action="${1:-}"

  case $action in
    generate)
      action="generate"
      input=("${input[@]:1}")
      ;;
    -h|--help)
      usage
      exit
      ;;
    "")
      ;;
    *)
      printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid command: " "$action" >&2
      exit 1
      ;;
  esac
}
generate_usage() {
  printf "Generate a completion using NovelAi\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  generate [OPTIONS] PROMPT\n"
  printf "  generate -h|--help\n"
  printf "\n\033[4m%s\033[0m\n" "Arguments:"
  printf "  PROMPT\n"
  printf "    The prompt to use\n"
  printf "    [@required]\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  --bad-words-ids [<BAD-WORDS-IDS>]\n"
  printf "    The bad words ids to use\n"
  printf "  --generate-until-sentence [<GENERATE-UNTIL-SENTENCE>]\n"
  printf "    Whether to generate until a sentence is found\n"
  printf "    [@default true]\n"
  printf "  --logit-bias-exp [<LOGIT-BIAS-EXP>]\n"
  printf "    The logit bias exp to use\n"
  printf "  --max-length [<MAX-LENGTH>]\n"
  printf "    The maximum length of the completion\n"
  printf "    [@default 40]\n"
  printf "  --min-length [<MIN-LENGTH>]\n"
  printf "    The minimum length of the completion\n"
  printf "    [@default 1]\n"
  printf "  --model [<MODEL>]\n"
  printf "    The model to use\n"
  printf "    [@default kayra-v1]\n"
  printf "  --num-logprobs [<NUM-LOGPROBS>]\n"
  printf "    The number of logprobs to use\n"
  printf "    [@default 10]\n"
  printf "  --order [<ORDER>]\n"
  printf "    The order to use\n"
  printf "  --phrase-rep-pen [<PHRASE-REP-PEN>]\n"
  printf "    The phrase repetition penalty to use\n"
  printf "    [@default medium]\n"
  printf "  --prefix [<PREFIX>]\n"
  printf "    The prefix to use\n"
  printf "    [@default special_proseaugmenter]\n"
  printf "  --repetition-penalty [<REPETITION-PENALTY>]\n"
  printf "    The repetition penalty to use\n"
  printf "    [@default 1]\n"
  printf "  --repetition-penalty-presence [<REPETITION-PENALTY-PRESENCE>]\n"
  printf "    The repetition penalty presence to use\n"
  printf "    [@default 0]\n"
  printf "  --repetition-penalty-range [<REPETITION-PENALTY-RANGE>]\n"
  printf "    The repetition penalty range to use\n"
  printf "    [@default 1024]\n"
  printf "  --repetition-penalty-whitelist [<REPETITION-PENALTY-WHITELIST>]\n"
  printf "    The repetition penalty whitelist to use\n"
  printf "  --repitition-penalty-frequency [<REPITITION-PENALTY-FREQUENCY>]\n"
  printf "    The repetition penalty frequency to use\n"
  printf "    [@default 0]\n"
  printf "  --return-full-text [<RETURN-FULL-TEXT>]\n"
  printf "    Whether to return the full text\n"
  printf "    [@default false]\n"
  printf "  --tail-free-sampling [<TAIL-FREE-SAMPLING>]\n"
  printf "    The tail free sampling to use\n"
  printf "    [@default 0.941]\n"
  printf "  --temperature [<TEMPERATURE>]\n"
  printf "    The temperature to use\n"
  printf "    [@default 2.5]\n"
  printf "  --typical-p [<TYPICAL-P>]\n"
  printf "    The typical p to use\n"
  printf "    [@default 0.969]\n"
  printf "  --use-cache [<USE-CACHE>]\n"
  printf "    Whether to use the cache\n"
  printf "    [@default false]\n"
  printf "  --use-string [<USE-STRING>]\n"
  printf "    Whether to use the string\n"
  printf "    [@default true]\n"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_generate_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        generate_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --bad-words-ids)
        rargs_bad_words_ids="$2"
        shift 2
        ;;
      --generate-until-sentence)
        rargs_generate_until_sentence="$2"
        shift 2
        ;;
      --logit-bias-exp)
        rargs_logit_bias_exp="$2"
        shift 2
        ;;
      --max-length)
        rargs_max_length="$2"
        shift 2
        ;;
      --min-length)
        rargs_min_length="$2"
        shift 2
        ;;
      --model)
        rargs_model="$2"
        shift 2
        ;;
      --num-logprobs)
        rargs_num_logprobs="$2"
        shift 2
        ;;
      --order)
        rargs_order="$2"
        shift 2
        ;;
      --phrase-rep-pen)
        rargs_phrase_rep_pen="$2"
        shift 2
        ;;
      --prefix)
        rargs_prefix="$2"
        shift 2
        ;;
      --repetition-penalty)
        rargs_repetition_penalty="$2"
        shift 2
        ;;
      --repetition-penalty-presence)
        rargs_repetition_penalty_presence="$2"
        shift 2
        ;;
      --repetition-penalty-range)
        rargs_repetition_penalty_range="$2"
        shift 2
        ;;
      --repetition-penalty-whitelist)
        rargs_repetition_penalty_whitelist="$2"
        shift 2
        ;;
      --repitition-penalty-frequency)
        rargs_repitition_penalty_frequency="$2"
        shift 2
        ;;
      --return-full-text)
        rargs_return_full_text="$2"
        shift 2
        ;;
      --tail-free-sampling)
        rargs_tail_free_sampling="$2"
        shift 2
        ;;
      --temperature)
        rargs_temperature="$2"
        shift 2
        ;;
      --typical-p)
        rargs_typical_p="$2"
        shift 2
        ;;
      --use-cache)
        rargs_use_cache="$2"
        shift 2
        ;;
      --use-string)
        rargs_use_string="$2"
        shift 2
        ;;
      -?*)
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
        exit 1
        ;;
      *)
        if [[ -z "$rargs_prompt" ]]; then
          rargs_prompt=$key
          shift
        else
          printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
          exit 1
        fi
        ;;
    esac
  done
}
# Generate a completion using NovelAi
generate() {
  local rargs_bad_words_ids
  local rargs_generate_until_sentence
  local rargs_logit_bias_exp
  local rargs_max_length
  local rargs_min_length
  local rargs_model
  local rargs_num_logprobs
  local rargs_order
  local rargs_phrase_rep_pen
  local rargs_prefix
  local rargs_repetition_penalty
  local rargs_repetition_penalty_presence
  local rargs_repetition_penalty_range
  local rargs_repetition_penalty_whitelist
  local rargs_repitition_penalty_frequency
  local rargs_return_full_text
  local rargs_tail_free_sampling
  local rargs_temperature
  local rargs_typical_p
  local rargs_use_cache
  local rargs_use_string
  local rargs_prompt
  # Parse environment variables
  
  if [[ -z "${NOVELAI_API_KEY:-}" ]]; then
    printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required environment variable: " "NOVELAI_API_KEY" >&2
    generate_usage >&2
    exit 1
  fi

  # Parse command arguments
  parse_generate_arguments "$@"

  
    
  if [[ -z "$rargs_generate_until_sentence" ]]; then
    rargs_generate_until_sentence="true"
  fi
    
    
  if [[ -z "$rargs_max_length" ]]; then
    rargs_max_length="40"
  fi
    
    
  if [[ -z "$rargs_min_length" ]]; then
    rargs_min_length="1"
  fi
    
    
  if [[ -z "$rargs_model" ]]; then
    rargs_model="kayra-v1"
  fi
    
    
  if [[ -z "$rargs_num_logprobs" ]]; then
    rargs_num_logprobs="10"
  fi
    
    
  if [[ -z "$rargs_phrase_rep_pen" ]]; then
    rargs_phrase_rep_pen="medium"
  fi
    
    
  if [[ -z "$rargs_prefix" ]]; then
    rargs_prefix="special_proseaugmenter"
  fi
    
    
  if [[ -z "$rargs_repetition_penalty" ]]; then
    rargs_repetition_penalty="1"
  fi
    
    
  if [[ -z "$rargs_repetition_penalty_presence" ]]; then
    rargs_repetition_penalty_presence="0"
  fi
    
    
  if [[ -z "$rargs_repetition_penalty_range" ]]; then
    rargs_repetition_penalty_range="1024"
  fi
    
    
  if [[ -z "$rargs_repitition_penalty_frequency" ]]; then
    rargs_repitition_penalty_frequency="0"
  fi
    
    
  if [[ -z "$rargs_return_full_text" ]]; then
    rargs_return_full_text="false"
  fi
    
    
  if [[ -z "$rargs_tail_free_sampling" ]]; then
    rargs_tail_free_sampling="0.941"
  fi
    
    
  if [[ -z "$rargs_temperature" ]]; then
    rargs_temperature="2.5"
  fi
    
    
  if [[ -z "$rargs_typical_p" ]]; then
    rargs_typical_p="0.969"
  fi
    
    
  if [[ -z "$rargs_use_cache" ]]; then
    rargs_use_cache="false"
  fi
    
    
  if [[ -z "$rargs_use_string" ]]; then
    rargs_use_string="true"
  fi
    
  
  if [[ -z "$rargs_prompt" ]]; then
    printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required option: " "prompt" >&2
    generate_usage >&2
    exit 1
  fi
  # Support reading the prompt from stdin
  if [[ "$rargs_prompt" == "-" ]]; then
    rargs_prompt="$(cat -)"
  fi
  if [[ -z "$rargs_bad_words_ids" ]]; then
    rargs_bad_words_ids="$BAD_WORDS_IDS"
  fi
  if [[ -z "$rargs_repetition_penalty_whitelist" ]]; then
    rargs_repetition_penalty_whitelist="$REPETITION_PENALTY_WHITELIST"
  fi
  if [[ -z "$rargs_logit_bias_exp" ]]; then
    rargs_logit_bias_exp="$LOGIT_BIAS_EXP"
  fi
  if [[ -z "$rargs_order" ]]; then
    rargs_order="$ORDER"
  fi
  data="$(jo \
    input="$rargs_prompt" \
    model="$rargs_model" \
    parameters="$(jo \
      bad_words_ids="$rargs_bad_words_ids" \
      generate_until_sentence="$rargs_generate_until_sentence" \
      logit_bias_exp="$rargs_logit_bias_exp" \
      max_length="$rargs_max_length" \
      min_length="$rargs_min_length" \
      num_logprobs="$rargs_num_logprobs" \
      order="$rargs_order" \
      phrase_rep_pen="$rargs_phrase_rep_pen" \
      prefix="$rargs_prefix" \
      repetition_penalty="$rargs_repetition_penalty" \
      repetition_penalty_frequency="$rargs_repetition_penalty_frequency" \
      repetition_penalty_presence="$rargs_repetition_penalty_presence" \
      repetition_penalty_range="$rargs_repetition_penalty_range" \
      repetition_penalty_whitelist="$rargs_repetition_penalty_whitelist" \
      return_full_text="$rargs_return_full_text" \
      tail_free_sampling="$rargs_tail_free_sampling" \
      temperature="$rargs_temperature" \
      typical_p="$rargs_typical_p" \
      use_cache="$rargs_use_cache" \
      use_string="$rargs_use_string" \
    )"\
  )"
  curl -sN -X 'POST' \
    "${NOVELAI_URL}/ai/generate-stream" \
    -H "accept: application/json" \
    -H "Authorization: Bearer ${NOVELAI_API_KEY}" \
    -H "Content-Type: application/json" \
    -d "$data" | while read -r line; do
    # Only keep the lines that begin with data
    if ! grep -q '^data:' <<< "$line"; then
      continue
    fi
    # Remove the data: prefix
    line=${line//data:/}
    token="$(echo "$line" | jq -r '.token')"
    final="$(echo "$line" | jq -r '.final')"
    # eval printf "%s" "$(echo -n "$token" | grep -v '^null$' | perl -pe 's/\\n/\n/g')"
    printf '%s' "$token"
    if [[ "$final" == "true" ]]; then
      break
    fi
  done
}

run() {
  declare -A deps=()
  declare -a input=()
  normalize_input "$@"
  parse_arguments "${input[@]}"
  # Call the right command action
  case "$action" in
    "generate")
      generate "${input[@]}"
      exit
      ;;
    "")
      printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing command. Select one of " "generate" >&2
      usage >&2
      exit 1
      ;;
    
  esac
}

run "$@"
