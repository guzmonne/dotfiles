#!/usr/bin/env bash
# This script was generated by rargs 0.0.0 (https://rargs.cloudbridge.uy)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

if [[ -n "${DEBUG:-}" ]]; then
  set -x
fi
set -e


parse_root() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -s | --session)
        rargs_session="$2"
        shift 2
        ;;
      --)
        shift
        other_args+=("$@")
        break
        ;;
      -?*)
        other_args+=("$1")
        shift
        ;;
      *)
        other_args+=("$1")
        shift
        ;;
    esac
  done
}

root() {
  local rargs_session
  # Parse environment variables
  
  if [[ -z "${OPENAI_API_KEY:-}" ]]; then
    printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required environment variable: " "OPENAI_API_KEY" >&2
    usage >&2
    exit 1
  fi

  # Parse command arguments
  parse_root "$@"

	declare -a names
	declare -a continue
	# Assuming each session is on a new line and consists of an id followed by a name
	sessions="$($mods --list --raw 2>&1)"
	# Read the second column (Names) into the names array
	mapfile -t names < <(echo -n "$sessions" | awk -F'\t' '{print $2}')
	if [[ "$sessions" != *"No conversations found."* ]] && [[ -z "$rargs_session" ]]; then
		rargs_session="$(
			$gum filter \
				--value="" \
				--reverse \
				--sort \
				--header="Select the mods session to use" \
				--placeholder="..." \
				--prompt="❯ " \
				--indicator=" " <<<"$(printf "%s\n" "${names[@]}")" || true
		)"
		continue=('--continue' "$rargs_session")
	else
		continue=('--continue' "$rargs_session")
	fi
	prompt="$($textarea)"
	if [[ -z "$prompt" ]]; then
		gum style "Empty prompt" \
			--foreground="blue" \
			--background="black" \
			--border="rounded" \
			--border-foreground="green" \
			--align="center" \
			--height=3 \
			--width=50 \
			--margin="1" \
			--padding="1" \
			--bold \
			--underline >&2
		return 1
	fi
	# shellcheck disable=SC2068
	$mods ${continue[@]} "$rargs_session" "$other_args" "$prompt"
}


normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

inspect_args() {
  prefix="rargs_"
  args="$(set | grep ^$prefix || true)"
  if [[ -n "$args" ]]; then
    echo
    echo args:
    for var in $args; do
      echo "- $var" | sed 's/=/ = /g'
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

mods="/opt/homebrew/bin/mods"
gum="/opt/homebrew/bin/gum"
textarea="$HOME/.local/bin/textarea.sh"

version() {
  echo "0.1.0"
}
usage() {
  printf "A script built around `rargs` to extend its functionality.\n"
  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  mods [OPTIONS] ...[MODS_ARGUMENTS]\n"
  printf "  mods -h|--help\n"
  printf "  mods -v|--version\n"
  printf "\n\033[4m%s\033[0m\n" "Arguments:"
  printf "  MODS_ARGUMENTS\n"
  printf "    Optional arguments to pass to "mods".\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -s --session [<SESSION>]\n"
  printf "    The session to use.\n"
  printf "  -h --help\n"
  printf "    Print help\n"
  printf "  -v --version\n"
  printf "    Print version\n"
}

parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -v|--version)
        version
        exit
        ;;
      -h|--help)
        usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done
  action="${1:-}"

  case $action in
    -h|--help)
      usage
      exit
      ;;
    "")
      action="root"
      ;;
    *)
      action="root"
      ;;
  esac
}

run() {
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_arguments "${input[@]}"
  # Check global environment variables
  
  if [[ -z "${OPENAI_API_KEY:-}" ]]; then
    printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required environment variable: " "OPENAI_API_KEY" >&2
    usage >&2
    exit 1
  fi

  root "${input[@]}"
}

run "$@"
