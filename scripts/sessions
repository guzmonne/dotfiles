#!/usr/bin/env bash
# shellcheck disable=SC2154
# shellcheck disable=SC2218
# @describe Handle sessionizer sessions
# @author Guzmán Monné
# @version 0.1.0

ROOT="$(dirname "$(readlink -f "$(which "$0")")")"

source "$ROOT/constants"

self="$0"
folders="$ROOT/folders"

# @cmd List the values of the history
history() {
  yq '.sessions.history[] | .' -r "$CONFIG"
}

# @cmd Go to a currently active session
go() {
  local session
  # local envs
  #
  # envs="$(yq '.env[] | .' "$CONFIG" | xargs)"
  # shellcheck disable=SC2016
  session=$(tmux list-sessions | awk '{print $1}' | tr -d ':' |
    fzf \
      --header 'Press CTRL-X to delete a session.' \
      --bind 'ctrl-x:execute-silent(tmux kill-session -t {+})+reload(tmux list-sessions | awk '"'"'{print $1}'"'"' | tr -d ':')')

  if [[ -z "$session" ]]; then
    exit 0
  fi

  session_name="$(printf "%s" "$session" | tr '.' '·')"

  current="$(yq '.sessions.current' "$CONFIG")"
  if [[ -n "$current" ]]; then
    # Append the $current session to the beginning of the history array.
    yq '.sessions.history |= . + ["'"$current"'"] | .sessions.history |= (. | reverse | unique | reverse)' -i "$CONFIG"
  fi

  # Set the current session and potentially filter it from the history.
  yq '.sessions.current |= "'"$session"'" | del(.sessions.history[] | select(. ==  "'"$session"'"))' -i "$CONFIG"

  $self set "$session"
}

# @cmd Sets a session
# @arg name! Session name
set() {
  local current
  local envs
  local session_name

  envs="$(yq '.env[] | .' "$CONFIG" | xargs)"
  session_name="$(printf "%s" "$argc_name" | tr '.' '·')"

  # Create new session if it doesn't exist
  if ! tmux has-session -t "=$session_name" 2>/dev/null; then
    # shellcheck disable=SC2086
    env $envs tmux new-session -s "$session_name" -c "$argc_name" -d
  fi

  # Connect to existing session
  if ! tmux attach -t "=$session_name" 2>/dev/null; then
    # shellcheck disable=SC2086
    env $envs tmux switch-client -t "$session_name"
  fi
}

# @cmd Set previous session
# @flag --show Show the next session but don't transition to it
prev() {
  local current
  local last
  local length

  length="$(yq '.sessions.history | length' "$CONFIG")"

  if [[ "$length" == "0" ]]; then
    exit 1
  fi

  current="$(yq '.sessions.current' "$CONFIG")"
  last="$(yq '.sessions.history[-1]' "$CONFIG")"

  if [[ -n "$argc_show" ]]; then
    echo "$last"
    exit 0
  fi

  current="$(yq '.sessions.current' "$CONFIG")"
  if [[ -n "$current" ]]; then
    # Append the $current session to the beginning of the history array.
    yq '.sessions.history |= ["'"$current"'"] + . | .sessions.history |= (. | unique)' -i "$CONFIG"
  fi

  # Remove the tail of the history array and set the current session.
  yq '.sessions.current |= "'"$last"'" | .sessions.history |= .[:-1]' -i "$CONFIG"

  $self set "$last"
}

# @cmd Set next session
# @flag --show Show the next session but don't transition to it
next() {
  local current
  local first
  local length

  length="$(yq '.sessions.history | length' "$CONFIG")"

  if [[ "$length" == "0" ]]; then
    exit 1
  fi

  current="$(yq '.sessions.current' "$CONFIG")"
  first="$(yq '.sessions.history[0]' "$CONFIG")"

  if [[ -n "$argc_show" ]]; then
    echo "$first"
    exit 0
  fi

  current="$(yq '.sessions.current' "$CONFIG")"
  if [[ -n "$current" ]]; then
    # Append the $current session to the end of the history array.
    yq '.sessions.history |= . + ["'"$current"'"] | .sessions.history |= (. | reverse | unique | reverse)' -i "$CONFIG"
  fi

  # Remove the head of the history array and set the current session.
  yq '.sessions.current |= "'"$first"'" | .sessions.history |= .[1:]' -i "$CONFIG"

  $self set "$first"
}

# @cmd Creates a new session
new() {
  local folder_name

  folder_name="$($folders evaluate)"

  if [[ -z "$folder_name" ]]; then
    exit 0
  fi

  current="$(yq '.sessions.current' "$CONFIG")"
  if [[ -n "$current" ]]; then
    # Append the $current session to the end of the history array.
    yq '.sessions.history |= . + ["'"$current"'"] | .sessions.history |= (. | reverse | unique | reverse)' -i "$CONFIG"
  fi

  # Set the current session.
  yq '.sessions.current |= "'"$folder_name"'"' -i "$CONFIG"

  $self set "$folder_name"
}


eval "$(argc "$0" "$@")"
