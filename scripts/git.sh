#!/usr/bin/env bash
# This script was generated by rargs 0.0.0 (https://rargs.cloudbridge.uy)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

if [[ -n "${DEBUG:-}" ]]; then
  set -x
fi
set -e


normalize_rargs_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      rargs_input+=("${BASH_REMATCH[1]}")
      rargs_input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      rargs_input+=("${BASH_REMATCH[1]}")
      rargs_input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        rargs_input+=("-${flags:i:1}")
      done
    else
      rargs_input+=("$arg")
    fi

    shift
  done
}

version() {
  echo -n "0.1.0"
}
usage() {
  printf "Some specific git commands that I personally use.\n"
  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  git.sh [OPTIONS] [COMMAND] [COMMAND_OPTIONS]\n"
  printf "  git.sh -h|--help\n"
  printf "  git.sh -v|--version\n"
  printf "\n\033[4m%s\033[0m\n" "Commands:"
  cat <<EOF
  add ......... Simplifies the process of staging files for a commit.
  semantic .... Create a semantic git commit from the git diff output.
EOF
  printf "  [@default semantic]\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
  printf "  -v --version\n"
  printf "    Print version\n"
}

parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -v|--version)
        version
        exit
        ;;
      -h|--help)
        usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done
  action="${1:-}"

  case $action in
    add)
      action="add"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    semantic)
      action="semantic"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    -h|--help)
      usage
      exit
      ;;
    "")
      action="semantic"
      ;;
    *)
      action="semantic"
      ;;
  esac
}
add_usage() {
  printf "Simplifies the process of staging files for a commit.\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  add [OPTIONS]\n"
  printf "  add -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  --all\n"
  printf "    Add all files\n"
  printf "  --no-git-commit\n"
  printf "    Don't run the git commit command automatically.\n"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_add_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        add_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --all)
        rargs_all=1
        shift
        ;;
      --no-git-commit)
        rargs_no_git_commit=1
        shift
        ;;
      -?*)
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
        exit 1
        ;;
      *)
        if [[ "$key" == "" ]]; then
          break
        fi
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
        exit 1
        ;;
    esac
  done
}
# Simplifies the process of staging files for a commit.
add() {
  local rargs_all
  local rargs_no_git_commit

  # Parse command arguments
  parse_add_arguments "$@"

	if [[ -n "$rargs_all" ]]; then
		git add -A
	else
		# Output the list of modified files
		modified_files="$(git ls-files --modified)"
		# Use fzf for interactive selection
		mapfile -t selected_files < <(echo "$modified_files" | fzf -m \
			--preview 'git diff -- {}' \
			--preview-window=up:80% \
			--height 100% \
			--border)
		for file in "${selected_files[@]}"; do
			git add "$file"
		done
	fi
	if [[ -z "$rargs_no_git_commit" ]]; then
		semantic
	fi
}
semantic_usage() {
  printf "Create a semantic git commit from the git diff output.\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  semantic [OPTIONS]\n"
  printf "  semantic -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  --no-git-commit\n"
  printf "    Don't run the git commit command automatically.\n"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_semantic_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        semantic_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --no-git-commit)
        rargs_no_git_commit=1
        shift
        ;;
      -?*)
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
        exit 1
        ;;
      *)
        if [[ "$key" == "" ]]; then
          break
        fi
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
        exit 1
        ;;
    esac
  done
}
# Create a semantic git commit from the git diff output.
semantic() {
  local rargs_no_git_commit

  # Parse command arguments
  parse_semantic_arguments "$@"

	local response
	response="$(mktemp)"
	git diff --staged -- . ':(exclude)package-lock.json' ':(exclude)lazy-lock.json' ':(exclude)*.lock' |
		e --template git-semantic-commit --vars "$(jo branch="$(git branch --show-current)")" --preset sonnet |
		tee "$response"
	if [[ -z "$rargs_no_git_commit" ]]; then
		commit="$(awk '/<output>/,/<\/output>/' "$response" | grep -vE '<output>|<\/output>' | perl -p -e 'chomp if eof')"
		printf '%s' "$commit" | git commit -F -
		git commit --amend
	fi
}

rargs_run() {
  declare -a rargs_input=()
  normalize_rargs_input "$@"
  parse_arguments "${rargs_input[@]}"
  # Call the right command action
  case "$action" in
    "add")
      add "${rargs_input[@]}"
      exit
      ;;
    "semantic")
      semantic "${rargs_input[@]}"
      exit
      ;;
    "")
      semantic
      exit
      ;;
    
  esac
}

rargs_run "$@"
