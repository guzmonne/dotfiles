#!/usr/bin/env bash
# This script was generated by rargs 0.0.0 (https://rargs.cloudbridge.uy)
# Modifying it manually is not recommended

EXTERNAL_ID=o-2ilc8z1zhe

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
	printf "bash version 4 or higher is required\n" >&2
	exit 1
fi

if [[ -n "${DEBUG:-}" ]]; then
	set -x
fi
set -e

normalize_rargs_input() {
	local arg flags

	while [[ $# -gt 0 ]]; do
		arg="$1"
		if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
			rargs_input+=("${BASH_REMATCH[1]}")
			rargs_input+=("${BASH_REMATCH[2]}")
		elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
			rargs_input+=("${BASH_REMATCH[1]}")
			rargs_input+=("${BASH_REMATCH[2]}")
		elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
			flags="${BASH_REMATCH[1]}"
			for ((i = 0; i < ${#flags}; i++)); do
				rargs_input+=("-${flags:i:1}")
			done
		else
			rargs_input+=("$arg")
		fi

		shift
	done
}

AWS_REGION="${AWS_REGION:-"us-east-1"}"

version() {
	echo "0.1.0"
}
usage() {
	printf "Script to simplify Bedrock configuration\n"
	printf "\n\033[4m%s\033[0m\n" "Usage:"
	printf "  bedrock [OPTIONS] [COMMAND] [COMMAND_OPTIONS]\n"
	printf "  bedrock -h|--help\n"
	printf "  bedrock -v|--version\n"
	printf "\n\033[4m%s\033[0m\n" "Commands:"
	cat <<EOF
  create-sso-config ....... Setup SSO settings of it doesn't exist in ~/.aws/config
  get-parameter ........... Gets a parameter stored on parameter store in the shared AWS account
  setup-terraform ......... Setup terraform for a given target environment
  write_to_credentials .... Configure profile credentials
EOF

	printf "\n\033[4m%s\033[0m\n" "Options:"
	printf "  -h --help\n"
	printf "    Print help\n"
	printf "  -v --version\n"
	printf "    Print version\n"
}

parse_arguments() {
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
		-v | --version)
			version
			exit
			;;
		-h | --help)
			usage
			exit
			;;
		*)
			break
			;;
		esac
	done
	action="${1:-}"

	case $action in
	create-sso-config)
		action="create-sso-config"
		rargs_input=("${rargs_input[@]:1}")
		;;
	get-parameter)
		action="get-parameter"
		rargs_input=("${rargs_input[@]:1}")
		;;
	setup-terraform)
		action="setup-terraform"
		rargs_input=("${rargs_input[@]:1}")
		;;
	write_to_credentials)
		action="write_to_credentials"
		rargs_input=("${rargs_input[@]:1}")
		;;
	-h | --help)
		usage
		exit
		;;
	"") ;;
	*)
		printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid command: " "$action" >&2
		exit 1
		;;
	esac
}
create-sso-config_usage() {
	printf "Setup SSO settings of it doesn't exist in ~/.aws/config\n"

	printf "\n\033[4m%s\033[0m\n" "Usage:"
	printf "  create-sso-config [OPTIONS] [AWS-CONFIG-FILE]\n"
	printf "  create-sso-config -h|--help\n"
	printf "\n\033[4m%s\033[0m\n" "Arguments:"
	printf "  AWS-CONFIG-FILE\n"
	printf "    AWS Config file\n"
	printf "    [@default ~/.aws/config]\n"

	printf "\n\033[4m%s\033[0m\n" "Options:"
	printf "  -h --help\n"
	printf "    Print help\n"
}
parse_create-sso-config_arguments() {
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
		-h | --help)
			create-sso-config_usage
			exit
			;;
		*)
			break
			;;
		esac
	done

	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in
		-?*)
			printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
			exit 1
			;;
		*)
			if [[ -z "$rargs_aws_config_file" ]]; then
				rargs_aws_config_file=$key
				shift
			else
				printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
				exit 1
			fi
			;;
		esac
	done
}
# Setup SSO settings of it doesn't exist in ~/.aws/config
create-sso-config() {
	local rargs_aws_config_file
	# Parse command arguments
	parse_create-sso-config_arguments "$@"

	if [[ -z "$rargs_aws_config_file" ]]; then
		rargs_aws_config_file="$HOME/.aws/config"
	fi

	if ! grep -q "\[profile bedrock-stage\]" "$rargs_aws_config_file"; then
		cat <<EOF >>"$rargs_aws_config_file"
[profile bedrock-stage]
region = us-east-1
sso_start_url = https://canoeintelligence.awsapps.com/start#/
sso_region = us-east-1
sso_account_id = 375352118073
sso_role_name = AdministratorAccess
output = json
EOF
	fi
	if ! grep -q "\[profile bedrock-shared\]" "$rargs_aws_config_file"; then
		cat <<EOF >>"$rargs_aws_config_file"
[profile bedrock-shared]
region = us-east-1
sso_start_url = https://canoeintelligence.awsapps.com/start#/
sso_region = us-east-1
sso_account_id = 761468725756
sso_role_name = AdministratorAccess
output = json
EOF
	fi
}
get-parameter_usage() {
	printf "Gets a parameter stored on parameter store in the shared AWS account\n"

	printf "\n\033[4m%s\033[0m\n" "Usage:"
	printf "  get-parameter [OPTIONS] NAME\n"
	printf "  get-parameter -h|--help\n"
	printf "\n\033[4m%s\033[0m\n" "Arguments:"
	printf "  NAME\n"
	printf "    Parameter name\n"
	printf "    [@required]\n"

	printf "\n\033[4m%s\033[0m\n" "Options:"
	printf "  -h --help\n"
	printf "    Print help\n"
}
parse_get-parameter_arguments() {
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
		-h | --help)
			get-parameter_usage
			exit
			;;
		*)
			break
			;;
		esac
	done

	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in
		-?*)
			printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
			exit 1
			;;
		*)
			if [[ -z "$rargs_name" ]]; then
				rargs_name=$key
				shift
			else
				printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
				exit 1
			fi
			;;
		esac
	done
}
# Gets a parameter stored on parameter store in the shared AWS account
get-parameter() {
	local rargs_name
	# Parse command arguments
	parse_get-parameter_arguments "$@"

	if [[ -z "$rargs_name" ]]; then
		printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required option: " "name" >&2
		get-parameter_usage >&2
		exit 1
	fi
	aws ssm --profile bedrock-shared get-parameter \
		--name "$rargs_name" \
		--query "Parameter.Value" \
		--output text
}
setup-terraform_usage() {
	printf "Setup terraform for a given target environment\n"

	printf "\n\033[4m%s\033[0m\n" "Usage:"
	printf "  setup-terraform --aft-path <AFT-PATH> [OPTIONS] [TARGET]\n"
	printf "  setup-terraform -h|--help\n"
	printf "\n\033[4m%s\033[0m\n" "Arguments:"
	printf "  TARGET\n"
	printf "    Canoe target account\n"
	printf "    [@choices dev, qa, stage, prod]\n"

	printf "\n\033[4m%s\033[0m\n" "Options:"
	printf "  --aft-path <AFT-PATH>\n"
	printf "    Absolute location of the aft-account-customizations repository\n"
	printf "  -h --help\n"
	printf "    Print help\n"
}
parse_setup-terraform_arguments() {
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
		-h | --help)
			setup-terraform_usage
			exit
			;;
		*)
			break
			;;
		esac
	done

	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in
		--aft-path)
			rargs_aft_path="$2"
			shift 2
			;;
		-?*)
			printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
			exit 1
			;;
		*)
			if [[ -z "$rargs_target" ]]; then
				rargs_target=$key
				shift
			else
				printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
				exit 1
			fi
			;;
		esac
	done
}
# Setup terraform for a given target environment
setup-terraform() {
	local rargs_aft_path
	local rargs_target
	# Parse command arguments
	parse_setup-terraform_arguments "$@"

	# Check dependencies
	for dependency in jinja2 aws; do
		if ! command -v $dependency >/dev/null 2>&1; then
			printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing dependency: " "$dependency" >&2
			exit 1
		else
			deps["$dependency"]="$(command -v $dependency | head -n1)"
		fi
	done

	if [[ -n "$rargs_target" ]]; then
		if [[ ! "(dev qa stage prod)" =~ $rargs_target ]]; then
			printf "\e[31m%s\e[33m%s\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option for " "target" ": " "$rargs_target" >&2
			setup-terraform_usage >&2
			exit 1
		fi
	fi

	if [[ -z "$rargs_aft_path" ]]; then
		printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required option: " "aft-path" >&2
		setup-terraform_usage >&2
		exit 1
	fi
	# Authenticate with AWS SSO
	# echo "Authenticating with SSO."
	# aws sso login --profile bedrock-shared
	declare -A account_ids=(["dev"]="577696792785" ["qa"]="144979025503" ["stage"]="375352118073" ["prod"]="425559265276")
	local aft_exec_role_arn
	local aft_execution_role
	local aft_mgmt_account
	local aft_mgmt_role
	local credentials
	local ct_mgmt_region
	local role_session_name
	local tf_backend_region
	local tf_ddb_table
	local tf_distribution
	local tf_kms_key_id
	local tf_s3_bucket
	local tf_s3_eu_key
	local tf_s3_eu_key_failover
	local tf_s3_key
	local tf_s3_key_failover
	local timestamp
	local vended_account_id
	local vended_exec_role_arn
	if [ "$AWS_REGION" != "us-east-1" ]; then
		echo "AWS_REGION has to be us-east-1, not ${AWS_REGION}"
		exit 1
	fi
	vended_account_id="${account_ids["$rargs_target"]}"
	echo "TARGET_ACCOUNT=$rargs_target"
	echo "VENDED_ACCOUNT_ID=$vended_account_id"
	timestamp=$(date '+%Y-%m-%d %H:%M:%S')
	tf_distribution=$(get-parameter "/aft/config/terraform/distribution")
	ct_mgmt_region=$(get-parameter "/aft/config/ct-management-region")
	aft_mgmt_account=$(get-parameter "/aft/account/aft-management/account-id")
	aft_exec_role_arn="arn:aws:iam::$aft_mgmt_account:role/AWSAFTExecution"
	vended_exec_role_arn="arn:aws:iam::$vended_account_id:role/AWSAFTExecution"
	role_session_name=$(get-parameter "/aft/resources/iam/aft-session-name")
	aft_mgmt_role=$(get-parameter "/aft/resources/iam/aft-administrator-role-name")
	aft_execution_role=$(get-parameter "/aft/resources/iam/aft-execution-role-name")
	role_session_name=$(get-parameter "/aft/resources/iam/aft-session-name")
	aft_mgmt_account=$(get-parameter "/aft/account/aft-management/account-id")
	echo "Generating credentials for ${aft_mgmt_role} in aft-management account: ${aft_mgmt_account}"
	credentials="$(
		aws sts --profile bedrock-shared assume-role \
			--role-arn "arn:aws:iam::${aft_mgmt_account}:role/${aft_mgmt_role}" \
			--role-session-name "${role_session_name}" \
			--external-id "$EXTERNAL_ID"
	)"
	write_to_credentials "aft-management-admin" "${credentials}"
	echo "Generating credentials for ${aft_execution_role} in vended account account: ${vended_account_id}"
	credentials="$(
		aws sts --profile bedrock-shared assume-role \
			--role-arn "arn:aws:iam::${vended_account_id}:role/${aft_execution_role}" \
			--role-session-name "${role_session_name}" \
			--profile aft-management-admin \
			--external-id "$EXTERNAL_ID"
	)"
	write_to_credentials "aft-target" "${credentials}"
	tf_backend_region=$(get-parameter "/aft/config/oss-backend/primary-region")
	tf_kms_key_id=$(get-parameter "/aft/config/oss-backend/kms-key-id")
	tf_ddb_table=$(get-parameter "/aft/config/oss-backend/table-id")
	tf_s3_bucket=$(get-parameter "/aft/config/oss-backend/bucket-id")
	tf_s3_key="${vended_account_id}-aft-account-customizations/terraform.tfstate"
	tf_s3_key_failover="${vended_account_id}-aft-account-customizations/us-west-2/terraform.tfstate"
	tf_s3_eu_key="${vended_account_id}-aft-account-customizations/eu-central-1/terraform.tfstate"
	tf_s3_eu_key_failover="${vended_account_id}-aft-account-customizations/eu-west-1/terraform.tfstate"
	cd "${rargs_aft_path}/${rargs_target}-customizations/terraform" || exit 1
	for file in *.jinja; do
		jinja2 "$file" \
			-D timestamp="$timestamp" \
			-D tf_distribution_type="$tf_distribution" \
			-D provider_region="$ct_mgmt_region" \
			-D region="$tf_backend_region" \
			-D aft_admin_role_arn="$aft_exec_role_arn" \
			-D target_admin_role_arn="$vended_exec_role_arn" \
			-D bucket="$tf_s3_bucket" \
			-D key="$tf_s3_key" \
			-D dynamodb_table="$tf_ddb_table" \
			-D external_id="$EXTERNAL_ID" \
			-D kms_key_id="$tf_kms_key_id" >"./$(basename "$file" .jinja).tf"
	done
	cd - || exit 1
	cd "${rargs_aft_path}/${rargs_target}-customizations/us-terraform-failover" || exit 1
	for file in *.jinja; do
		jinja2 "$file" \
			-D timestamp="$timestamp" \
			-D tf_distribution_type="$tf_distribution" \
			-D provider_region="us-west-2" \
			-D region="$tf_backend_region" \
			-D aft_admin_role_arn="$aft_exec_role_arn" \
			-D target_admin_role_arn="$vended_exec_role_arn" \
			-D bucket="$tf_s3_bucket" \
			-D key="$tf_s3_key_failover" \
			-D dynamodb_table="$tf_ddb_table" \
			-D external_id="$EXTERNAL_ID" \
			-D kms_key_id="$tf_kms_key_id" >"./$(basename "$file" .jinja).tf"
	done
	cd - || exit 1
	cd "${rargs_aft_path}/${rargs_target}-customizations/eu-terraform" || exit 1
	for file in *.jinja; do
		jinja2 "$file" \
			-D timestamp="$timestamp" \
			-D tf_distribution_type="$tf_distribution" \
			-D provider_region="eu-central-1" \
			-D region="$tf_backend_region" \
			-D aft_admin_role_arn="$aft_exec_role_arn" \
			-D target_admin_role_arn="$vended_exec_role_arn" \
			-D bucket="$tf_s3_bucket" \
			-D key="$tf_s3_eu_key" \
			-D dynamodb_table="$tf_ddb_table" \
			-D external_id="$EXTERNAL_ID" \
			-D kms_key_id="$tf_kms_key_id" >"./$(basename "$file" .jinja).tf"
	done
	cd - || exit 1
	cd "${rargs_aft_path}/${rargs_target}-customizations/eu-terraform-failover" || exit 1
	for file in *.jinja; do
		echo
		jinja2 "$file" \
			-D timestamp="$timestamp" \
			-D tf_distribution_type="$tf_distribution" \
			-D provider_region="eu-west-1" \
			-D region="$tf_backend_region" \
			-D aft_admin_role_arn="$aft_exec_role_arn" \
			-D target_admin_role_arn="$vended_exec_role_arn" \
			-D bucket="$tf_s3_bucket" \
			-D key="$tf_s3_eu_key_failover" \
			-D dynamodb_table="$tf_ddb_table" \
			-D external_id="$EXTERNAL_ID" \
			-D kms_key_id="$tf_kms_key_id" >"./$(basename "$file" .jinja).tf"
	done
	cd "${rargs_aft_path}/${rargs_target}-customizations/terraform" || exit 1
	if ! AWS_PROFILE=aft-management-admin GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_canoe -F /dev/null' /Users/guzmanmonne/.local/bin/terraform147 init; then
		m1-terraform-provider-helper install hashicorp/template -v v2.2.0
		m1-terraform-provider-helper lockfile upgrade
		AWS_PROFILE=aft-management-admin GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa_canoe -F /dev/null' /Users/guzmanmonne/.local/bin/terraform147 init
	fi
}
write_to_credentials_usage() {
	printf "Configure profile credentials\n"

	printf "\n\033[4m%s\033[0m\n" "Usage:"
	printf "  write_to_credentials [OPTIONS] PROFILE CREDENTIALS\n"
	printf "  write_to_credentials -h|--help\n"
	printf "\n\033[4m%s\033[0m\n" "Arguments:"
	printf "  PROFILE\n"
	printf "    AWS profile name\n"
	printf "    [@required]\n"
	printf "  CREDENTIALS\n"
	printf "    AWS JSON serialized credentials\n"
	printf "    [@required]\n"

	printf "\n\033[4m%s\033[0m\n" "Options:"
	printf "  -h --help\n"
	printf "    Print help\n"
}
parse_write_to_credentials_arguments() {
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
		-h | --help)
			write_to_credentials_usage
			exit
			;;
		*)
			break
			;;
		esac
	done

	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in
		-?*)
			printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
			exit 1
			;;
		*)
			if [[ -z "$rargs_profile" ]]; then
				rargs_profile=$key
				shift
			elif [[ -z "$rargs_credentials" ]]; then
				rargs_credentials=$key
				shift
			else
				printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid argument: " "$key" >&2
				exit 1
			fi
			;;
		esac
	done
}
# Configure profile credentials
write_to_credentials() {
	local rargs_profile
	local rargs_credentials
	# Parse command arguments
	parse_write_to_credentials_arguments "$@"

	if [[ -z "$rargs_profile" ]]; then
		printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required option: " "profile" >&2
		write_to_credentials_usage >&2
		exit 1
	fi
	if [[ -z "$rargs_credentials" ]]; then
		printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required option: " "credentials" >&2
		write_to_credentials_usage >&2
		exit 1
	fi
	local aws_access_key_id
	local aws_secret_access_key
	aws_access_key_id="$(echo "${rargs_credentials}" | jq --raw-output ".Credentials[\"AccessKeyId\"]")"
	aws_secret_access_key="$(echo "${rargs_credentials}" | jq --raw-output ".Credentials[\"SecretAccessKey\"]")"
	aws_session_token="$(echo "${rargs_credentials}" | jq --raw-output ".Credentials[\"SessionToken\"]")"
	aws configure set aws_access_key_id "${aws_access_key_id}" --profile "${rargs_profile}"
	aws configure set aws_secret_access_key "${aws_secret_access_key}" --profile "${rargs_profile}"
	aws configure set aws_session_token "${aws_session_token}" --profile "${rargs_profile}"
}

rargs_run() {
	declare -a rargs_input=()
	normalize_rargs_input "$@"
	parse_arguments "${rargs_input[@]}"
	# Call the right command action
	case "$action" in
	"create-sso-config")
		create-sso-config "${rargs_input[@]}"
		exit
		;;
	"get-parameter")
		get-parameter "${rargs_input[@]}"
		exit
		;;
	"setup-terraform")
		setup-terraform "${rargs_input[@]}"
		exit
		;;
	"write_to_credentials")
		write_to_credentials "${rargs_input[@]}"
		exit
		;;
	"")
		printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing command. Select one of " "create-sso-config, get-parameter, setup-terraform, write_to_credentials" >&2
		usage >&2
		exit 1
		;;

	esac
}

rargs_run "$@"
